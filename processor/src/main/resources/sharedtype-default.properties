# SharedType default properties

######################
# General properties #
######################

## a set of emission targets, comma separated. supported targets: CONSOLE, JAVA_SERIALIZED, TYPESCRIPT
## CONSOLE - type meta info will be printed to console during processing
## JAVA_SERIALIZED - type meta info will be serialized to file on classpath after processing
sharedtype.targets=TYPESCRIPT

## a set of annotation qualified class names to indicate optionality, comma separated.
sharedtype.optional-annotations=javax.annotation.Nullable

## a set of type qualified names to indicate optionality, comma separated.
sharedtype.optional-container-types=java.util.Optional

## a set of accessor getter prefixes, comma separated.
sharedtype.accessor.getter-prefixes=get,is

## a set of type qualified names to be treated as array during type parsing, comma separated.
sharedtype.array-like-types=java.lang.Iterable

## a set of type qualified names to be treated as map during type parsing, comma separated.
## Currently, the type must have exactly two type parameters, the first one is the key type and the second one is the value type.
## Later version of SharedType will support more flexible map types, by providing configuration options.
sharedtype.map-like-types=java.util.Map

## a set of type qualified names to be ignored during type parsing, comma separated.
sharedtype.ignored-types=java.lang.Object,java.lang.Enum,java.io.Serializable,java.lang.Record,java.lang.Cloneable

## a set of field names to be ignored during type parsing, comma separated.
sharedtype.ignored-fields=serialVersionUID

## whether to put constants to into a namespace the same name as the enclosing Java class, if false, constants will be at top level in the generated file.
sharedtype.constant-namespaced=true

##################################
# Typescript specific properties #
##################################

## output file name
sharedtype.typescript.output-file-name=types.ts

## the type literal of the java object map type, e.g. any, unknown
sharedtype.typescript.java-object-map-type=any

## interface property delimiter, supported characters: ; ,
sharedtype.typescript.interface-property-delimiter=;

## optional field format, can be combination of "?", "null", "undefined", the latter 2 are rendered as union type. Cannot be empty.
sharedtype.typescript.optional-field-format=?

############################
# Rust specific properties #
############################

## output file name
sharedtype.rust.output-file-name=types.rs

## Whether to render #![allow(dead_code)]
sharedtype.rust.allow-deadcode=true

## Whether to convert field names to snake_case. If set to false, #[allow(non_snake_case)] will be added
sharedtype.rust.convert-to-snake-case=false

## Default type macros, comma separated
sharedtype.rust.default-macros-traits=Debug

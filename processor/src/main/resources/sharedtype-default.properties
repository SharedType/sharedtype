# SharedType default properties

######################
# General properties #
######################

## a set of emission targets, comma separated. supported targets: CONSOLE, JAVA_SERIALIZED, TYPESCRIPT
## CONSOLE - type meta info will be printed to console during processing
## JAVA_SERIALIZED - type meta info will be serialized to file on classpath after processing
sharedtype.targets=TYPESCRIPT

## a set of annotation qualified class names to indicate optionality, comma separated.
sharedtype.optional-annotations=javax.annotation.Nullable

## a set of qualified class names for annotation types in addition to @SharedType.Ignore
sharedtype.ignore-annotations=

## a set of qualified class names for annotation types in addition to @SharedType.Accessor
sharedtype.accessor-annotations=

## a set of qualified class names for annotation types in addition to @SharedType.EnumValue
sharedtype.enum-value-annotations=

## a set of type qualified names to indicate optionality, comma separated.
sharedtype.optional-container-types=java.util.Optional

## a set of accessor getter prefixes, comma separated.
sharedtype.accessor.getter-prefixes=get,is

## a set of type qualified names to be treated as array during type parsing, comma separated.
sharedtype.array-like-types=java.lang.Iterable

## a set of type qualified names to be treated as map during type parsing, comma separated.
## Currently, the type must have exactly two type parameters, the first one is the key type and the second one is the value type.
## Later version of SharedType will support more flexible map types, by providing configuration options.
sharedtype.map-like-types=java.util.Map

## a set of type qualified names to be treated as date/time during type parsing, comma separated.
## By default, date/time types are converted to string types in target languages.
sharedtype.datetime-like-types=java.util.Date,java.time.temporal.Temporal,org.joda.time.base.AbstractInstant,org.joda.time.base.AbstractPartial

## a set of type qualified names to be ignored during type parsing, comma separated.
sharedtype.ignored-types=java.lang.Object,java.lang.Enum,java.io.Serializable,java.lang.Record,java.lang.Cloneable,java.lang.Comparable

## a set of field names to be ignored during type parsing, comma separated.
sharedtype.ignored-fields=serialVersionUID

## whether to put constants to into a namespace the same name as the enclosing Java class, if false, constants will be at top level in the generated file.
sharedtype.constant-namespaced=true


##################################
# Typescript specific properties #
##################################

## output file name
sharedtype.typescript.output-file-name=types.ts

## the type literal of the java object map type, e.g. "any", "unknown"
sharedtype.typescript.java-object-map-type=any

## the target type for date/time types, can be any type literal, but SharedType will not verify its validity in target code
sharedtype.typescript.target-datetime-type=string

## interface property delimiter, supported characters: ; ,
sharedtype.typescript.interface-property-delimiter=;

## optional field format, can be combination of "?", "null", "undefined", the latter 2 are rendered as union type. Cannot be empty.
sharedtype.typescript.optional-field-format=?

## enum format, can be "const_enum" (const enum), "enum" (enum), or "union" (union type).
sharedtype.typescript.enum-format=union

## whether to mark field as readonly, value can be one of:
## "all" - all fields are readonly
## "acyclic" - only fields of not cyclic referenced types are readonly
## "none" - no fields are readonly
sharedtype.typescript.field-readonly-type=acyclic

## arbitrary type mappings, comma separated, property can be written in multi-lines with backslash \ examples:
## sharedtype.typescript.type-mappings=mypackage.MyType1:Type1,\
##                                     mypackage.MyType2:Type2
sharedtype.typescript.type-mappings=

## Path to custom code snippet file, code snippet in the file will be injected into the top of generated file
## If the file does not exist, it will be ignored
## Below default assumes the file is on the cmd execution path
sharedtype.typescript.custom-code-path=sharedtype-custom-code.ts

##############################
# Golang specific properties #
##############################

## output file name
sharedtype.go.output-file-name=types.go

## output file package name
sharedtype.go.output-file-package-name=sharedtype

## the type literal of the java object map type, e.g. "any", "interface{}"
sharedtype.go.java-object-map-type=any

## the target type for date/time types, can be any type literal, but SharedType will not verify its validity in target code
sharedtype.go.target-datetime-type=string

## arbitrary type mappings, comma separated, property can be written in multi-lines with backslash \ examples:
## sharedtype.go.type-mappings=mypackage.MyType1:Type1,\
##                             mypackage.MyType2:Type2
sharedtype.go.type-mappings=

## Path to custom code snippet file, code snippet in the file will be injected into the top of generated file
## If the file does not exist, it will be ignored
## Below default assumes the file is on the cmd execution path
sharedtype.go.custom-code-path=sharedtype-custom-code.go

############################
# Rust specific properties #
############################

## output file name
sharedtype.rust.output-file-name=types.rs

## Whether to render #![allow(dead_code)]
sharedtype.rust.allow-deadcode=true

## Whether to convert field names to snake_case. If set to false, #[allow(non_snake_case)] will be added
sharedtype.rust.convert-to-snake-case=false

## Default type macros, comma separated
sharedtype.rust.default-macros-traits=Debug

## the target type for date/time types, can be any type literal, but SharedType will not verify its validity in target code
sharedtype.rust.target-datetime-type=String

## arbitrary type mappings, comma separated, property can be written in multi-lines with backslash \ examples:
## sharedtype.rust.type-mappings=mypackage.MyType1:Type1,\
##                               mypackage.MyType2:Type2
sharedtype.rust.type-mappings=

## Path to custom code snippet file, code snippet in the file will be injected into the top of generated file
## If the file does not exist, it will be ignored
## Below default assumes the file is on the cmd execution path
sharedtype.rust.custom-code-path=sharedtype-custom-code.rs
